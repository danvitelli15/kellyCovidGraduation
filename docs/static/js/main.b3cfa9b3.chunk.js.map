{"version":3,"sources":["utils/ScoreContext.ts","pages/trivia/components/Question.tsx","utils/TriviaQuestions.ts","pages/trivia/components/Results.tsx","pages/trivia/Index.tsx","pages/home/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ScoreContext","createContext","score","increaseScore","frozen","Question","props","useState","answered","setAnswered","clickedIndex","setClickedIndex","correctIndex","setCorrectIndex","options","setOptions","optionsRef","useRef","useEffect","current","focus","insertIndex","Math","floor","random","WrongAnswers","length","optionsBuilder","map","i","splice","Answer","Card","style","width","CardBody","className","ref","tabIndex","Consumer","option","index","Button","block","color","onClick","setTimeout","SubmitAnswer","onAnswerClick","Questions","Results","condesending","Jumbotron","Trivia","completed","setCompleted","questionNumber","setQuestionNumber","Container","Row","CardHeader","Home","to","App","setScore","Provider","value","prev","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3cfa9b3.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const ScoreContext = createContext({\r\n  score: 0,\r\n  increaseScore: () => {},\r\n});\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Button, Card, CardBody } from \"reactstrap\";\r\nimport { ScoreContext } from \"../../../utils/ScoreContext\";\r\nimport { QuestionProps } from \"../Interfaces\";\r\n\r\nimport \"../style/question.css\";\r\n\r\nlet frozen = false;\r\n\r\nconst Question = (props: QuestionProps): JSX.Element => {\r\n  const [answered, setAnswered] = useState(false);\r\n  const [clickedIndex, setClickedIndex] = useState(-1);\r\n  const [correctIndex, setCorrectIndex] = useState(0);\r\n  const [options, setOptions] = useState<Array<string>>([]);\r\n\r\n  const optionsRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (optionsRef.current) {\r\n      // @ts-ignore : current is possibly null error handled by if statement\r\n      optionsRef.current.focus();\r\n    }\r\n    setAnswered(false);\r\n    setClickedIndex(-1);\r\n    frozen = false;\r\n    const insertIndex = Math.floor(Math.random() * (props.Question.WrongAnswers.length + 1));\r\n    const optionsBuilder = props.Question.WrongAnswers.map((i) => i);\r\n    optionsBuilder.splice(insertIndex, 0, props.Question.Answer);\r\n    setCorrectIndex(insertIndex);\r\n    setOptions(optionsBuilder);\r\n  }, [props.Question]);\r\n\r\n  const onAnswerClick = (clickedIndex: number) => {\r\n    if (!frozen) {\r\n      frozen = true;\r\n      setClickedIndex(clickedIndex);\r\n      setAnswered(true);\r\n\r\n      setTimeout(() => props.SubmitAnswer(), 1500);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card style={{ width: \"100%\" }}>\r\n      <CardBody>\r\n        <p>{props.Question.Question}</p>\r\n        <legend className=\"col-form-label col-sm-2\" ref={optionsRef} tabIndex={0}>\r\n          Options\r\n        </legend>\r\n        <ScoreContext.Consumer>\r\n          {({ increaseScore }) => (\r\n            <>\r\n              {options.map((option, index) => (\r\n                <Button\r\n                  block\r\n                  color={\r\n                    answered && (index === clickedIndex || index === correctIndex)\r\n                      ? index === correctIndex\r\n                        ? \"success\"\r\n                        : \"danger\"\r\n                      : \"secondary\"\r\n                  }\r\n                  key={`answer_${index}`}\r\n                  onClick={() => {\r\n                    if (index === correctIndex) increaseScore();\r\n                    onAnswerClick(index);\r\n                  }}\r\n                >\r\n                  {option}\r\n                </Button>\r\n              ))}\r\n            </>\r\n          )}\r\n        </ScoreContext.Consumer>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","import { Question } from \"./Interfaces\";\r\n\r\nconst Questions: Array<Question> = [\r\n  { Question: \"What is Kelly's middle name?\", Answer: \"Nicolle\", WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"] },\r\n  { Question: \"What year was Kelly born?\", Answer: \"2002\", WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"] },\r\n  { Question: \"What is Kelly allergic to?\", Answer: \"Tree nuts\", WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"] },\r\n  { Question: \"In what month was Kelly born?\", Answer: \"December\", WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"] },\r\n  { Question: \"What day of the month was Kelly born?\", Answer: \"9th\", WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"] },\r\n  {\r\n    Question: \"What does Kelly want to study in college?\",\r\n    Answer: \"Early Childhood Education\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n  {\r\n    Question: \"What is Kelly's favorite TV series?\",\r\n    Answer: \"Friends\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n  {\r\n    Question: \"What job does Kelly have?\",\r\n    Answer: \"Babysitting / Nanny\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n  { Question: \"What is Kelly's favorite color?\", Answer: \"Blue\", WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"] },\r\n  { Question: \"What is Kelly's favorite candy?\", Answer: \"Reeses\", WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"] },\r\n  {\r\n    Question: \"What is Kelly's favorite fast casual restaurant?\",\r\n    Answer: \"Chipotle\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n  {\r\n    Question: \"What pop does Kelly like to drink?\",\r\n    Answer: \"Dr. Pepper / Dr. Thunder\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n  {\r\n    Question: \"What country would Kelly like to travel to?\",\r\n    Answer: \"France (Paris)\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n  {\r\n    Question: \"What school will Kelly be attending in the fall?\",\r\n    Answer: \"TBD\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n  {\r\n    Question: \"What extra cirricular activiities did Kelly participate in during high school?\",\r\n    Answer: \"Robotics, Speech, Drone racing\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n  { Question: \"What is Kelly's favorite subject?\", Answer: \"TBD\", WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"] },\r\n  {\r\n    Question: \"What is Kelly's least favorite subject?\",\r\n    Answer: \"TBD\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n  {\r\n    Question: `Kelly is not a \"strawberry blonde\" but a what?`,\r\n    Answer: \"Blueberry blonde\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n  {\r\n    Question: \"What is Kelly's favorite nick name for Everest?\",\r\n    Answer: \"My Bubby\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n  {\r\n    Question: \"What is Kelly's favorite type of popcorn?\",\r\n    Answer: \"White Cheddar (Aldi's)\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n  {\r\n    Question: \"What is Kelly's favorite dessert?\",\r\n    Answer: \"Wonder bars\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n  { Question: \"What is Kelly's favorite meal?\", Answer: \"TBD\", WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"] },\r\n  {\r\n    Question: \"What is Kelly's favorite Disney movie?\",\r\n    Answer: \"TBD\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n  {\r\n    Question: \"What is Kelly's favorite Disney character?\",\r\n    Answer: \"TBD\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n  {\r\n    Question: \"What is Kelly's favorite Disney princess?\",\r\n    Answer: \"TBD\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n  { Question: \"What instrument does Kelly play?\", Answer: \"Flute\", WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"] },\r\n  {\r\n    Question: \"How many years has Kelly participated in band?\",\r\n    Answer: \"8 (????)\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n  {\r\n    Question: \"What does Kelly volunteer for on Sundays?\",\r\n    Answer: \"TBD\",\r\n    WrongAnswers: [\"Wrong 1\", \"Wrong 2\", \"Wrong 3\"],\r\n  },\r\n];\r\n\r\nexport default Questions;\r\n","import React from \"react\";\r\nimport { Jumbotron } from \"reactstrap\";\r\nimport { ScoreContext } from \"../../../utils/ScoreContext\";\r\n\r\nconst Results = () => {\r\n  const condesending = (score: number) => {\r\n    if (score <= 10) {\r\n      return <p>Maybe you should go ask Kelly a little about herself...</p>;\r\n    } else if (score <= 20) {\r\n      return <p>You seem to know a fair amount about kelly.</p>;\r\n    } else {\r\n      return <p>You should go tell Kelly how well you know her.</p>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Jumbotron>\r\n      <ScoreContext.Consumer>\r\n        {({ score }) => (\r\n          <>\r\n            <h2>Thanks for trying the trivia. You got {score} questions right!</h2>\r\n            {condesending(score)}\r\n          </>\r\n        )}\r\n      </ScoreContext.Consumer>\r\n      <p>Food is availble in the garage.</p>\r\n      <p>Please refer to Kelly as a blueberry blond to her face constantly.</p>\r\n    </Jumbotron>\r\n  );\r\n};\r\n\r\nexport default Results;\r\n","import React, { useState } from \"react\";\r\nimport { Card, CardHeader, Container, Row } from \"reactstrap\";\r\nimport Question from \"./components/Question\";\r\nimport { TriviaProps } from \"./Interfaces\";\r\n\r\nimport Questions from \"../../utils/TriviaQuestions\";\r\nimport { ScoreContext } from \"../../utils/ScoreContext\";\r\nimport Results from \"./components/Results\";\r\n\r\nconst Trivia = (props: TriviaProps): JSX.Element => {\r\n  const [completed, setCompleted] = useState(false);\r\n  const [questionNumber, setQuestionNumber] = useState(0);\r\n\r\n  const answer = () => {\r\n    if (questionNumber + 1 < Questions.length) {\r\n      setQuestionNumber((index) => index + 1);\r\n    } else {\r\n      setCompleted(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Trivia</h1>\r\n      <Row>\r\n        {completed ? (\r\n          <Results />\r\n        ) : (\r\n          <Card style={{ width: \"100%\" }}>\r\n            <CardHeader>\r\n              <ScoreContext.Consumer>{({ score }) => <>Score: {score}</>}</ScoreContext.Consumer>\r\n            </CardHeader>\r\n            <Question Question={Questions[questionNumber]} SubmitAnswer={answer} />\r\n          </Card>\r\n        )}\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Trivia;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Jumbotron } from \"reactstrap\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Container>\r\n      <Jumbotron>\r\n        <h1>Welcome to Kelly Zschokke's graduation party!</h1>\r\n        <Link className=\"btn btn-primary\" to=\"/trivia\">\r\n          See how well you know kelly\r\n        </Link>\r\n      </Jumbotron>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\nimport Trivia from \"./pages/trivia/Index\";\nimport { ScoreContext } from \"./utils/ScoreContext\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./pages/home\";\n\nfunction App() {\n  const [score, setScore] = useState(0);\n\n  return (\n    <ScoreContext.Provider\n      value={{\n        score: score,\n        increaseScore: () => setScore((prev) => score + 1),\n      }}\n    >\n      <Router>\n        <Switch>\n          <Route path=\"/kellyCovidGraduation/trivia\">\n            <Trivia />\n          </Route>\n          <Route path=\"/kellyCovidGraduation/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </ScoreContext.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./style/dark.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}